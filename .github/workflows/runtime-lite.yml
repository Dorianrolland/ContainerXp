name: runtime-lite
on: [workflow_dispatch, push]
jobs:
  build:
    runs-on: ubuntu-20.04
    if: "contains(github.event.head_commit.message, 'lite') || github.event_name == 'workflow_dispatch'"
    strategy:
      matrix:
        arch: [linux/arm64, linux/amd64]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          driver-opts: network=host

      - name: Set up Docker Layer Caching
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up docker-slim
        run: |
          curl -L -o ds.tar.gz https://downloads.dockerslim.com/releases/1.36.2/dist_linux.tar.gz
          tar -xvf ds.tar.gz
          sudo mv dist_linux/docker-slim /usr/local/bin/
          sudo mv dist_linux/docker-slim-sensor /usr/local/bin/
          docker-slim update

      - name: Mettre à jour Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Vérifier la version de Docker
        run: docker --version
          
      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build the tag
        id: tag
        run: |
          if [ ${{ matrix.arch }} == "linux/arm64" ]; then
            echo ::set-output name=tag::$(echo "latest_arm")
            echo ::set-output name=image::$(echo "dorianalp38/runtime-lite:latest_arm")
          else
            echo ::set-output name=tag::$(echo "latest_amd64")
            echo ::set-output name=image::$(echo "dorianalp38/runtime-lite:latest_amd64")
          fi

      - name: Build image and send it to local repo
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{steps.tag.outputs.image}}
          context: Dockerfiles
          file: Dockerfiles/Dockerfile
          platforms: ${{ matrix.arch }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build the Docker image (debug)
        run: |
          if [ ${{ matrix.arch }} == "linux/amd64" ]; then
            docker pull ${{steps.tag.outputs.image}}
            docker-slim --debug build --target ${{steps.tag.outputs.image}} --tag dorianalp38/runtime-lite:${{steps.tag.outputs.tag}} --http-probe=false --continue-after 1 --include-bin /usr/bin/rsh --include-bin /usr/bin/mpirun --include-bin /lib/x86_64-linux-gnu/libudev.so.1 --include-path=/usr/share/openmpi --include-path /usr/lib/x86_64-linux-gnu/openmpi/lib/openmpi3/
            docker push dorianalp38/runtime-lite:${{steps.tag.outputs.tag}}
          fi

  # (Le reste de votre job "manifest" reste inchangé)
